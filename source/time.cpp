//==================================================================================================================
//
// タイム処理[time.cpp]
// Author : Seiya Takahashi
//
//==================================================================================================================
#include "time.h"
#include "renderer.h"
#include "number.h"
#include "fade.h"
#include "game.h"
#include "debugProc.h"
#include "player.h"
#include "inputKeyboard.h"
#include "UI_game.h"

//==================================================================================================================
// 静的メンバー変数の初期化
//==================================================================================================================
int CTime::m_nTime = NULL;			// タイム

//==================================================================================================================
//
// コンストラクタ
//
//==================================================================================================================
CTime::CTime()
{
	// 初期化
	m_nTime = 0;					// タイム
}

//==================================================================================================================
//
// デストラクタ
//
//==================================================================================================================
CTime::~CTime()
{

}

//==================================================================================================================
// タイムの初期化
//==================================================================================================================
void CTime::Init(void)
{
	m_bActive = false;

	// 初期化
	m_dStartTime = (int)(START_TIMU * FRAME_TIMU);		// 始まるタイム

	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 生成処理
		m_apNumber[nCntScore] = CNumber::Create();

		// 位置設定
		m_apNumber[nCntScore]->SetPos(D3DXVECTOR3(TIME_POS_X + TIME_INTERVAL_X * nCntScore,				// 位置X
													TIME_POS_Y,											// 位置Y
													0.0f),												// 位置Z
													NUMBER_SIZE_X, NUMBER_SIZE_Y);						// 大きさ
	}

	// タイムの設定
	SetTime(m_dStartTime);
}

//==================================================================================================================
// タイムの終了
//==================================================================================================================
void CTime::Uninit(void)
{
	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 数字があるとき
		if (m_apNumber[nCntScore] != NULL)
		{
			// 数字の終了処理
			m_apNumber[nCntScore]->Uninit();

			// メモリ削除
			delete m_apNumber[nCntScore];

			// ポインタ用NULL
			m_apNumber[nCntScore] = nullptr;
		}
	}
}

//==================================================================================================================
// タイムの更新
//==================================================================================================================
void CTime::Update(void)
{
	// キーボード取得
	CInputKeyboard *pKeyboard = CManager::GetInputKeyboard();

	// フェード取得
	CFade::FADE fade = CFade::GetFade();

	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 数字があるとき
		if (m_apNumber[nCntScore] != NULL)
		{
			// 更新処理
			m_apNumber[nCntScore]->Update();
		}
	}

	if (m_bActive)
	{
		//// タイム減少
		m_dStartTime--;
	}

	// タイムが[0]以上とき
	if (m_dStartTime >= 0)
	{
		// タイムの設定
		SetTime(m_dStartTime);
	}

	// カウントが[-1]のとき
	if (m_dStartTime == -1)
	{
		// フェードが何もない時
		if (fade == CFade::FADE_NONE)
		{
			// フェードの設定
			//CGame::SetGameState(CGame::GAMESTATE_TIMEUP);
		}
	}
}

//==================================================================================================================
// タイムの描画
//==================================================================================================================
void CTime::Draw(void)
{
	// UIを表示させていいとき
	if (!CUI_game::GetbDisp())
	{
		return;
	}

	// 最大桁数までカウント
	for (int nCntScore = 0; nCntScore < MAX_TIME; nCntScore++)
	{
		// 数字があるとき
		if (m_apNumber[nCntScore] != NULL)
		{
			// 描画処理
			m_apNumber[nCntScore]->Draw();
		}
	}
}

//==================================================================================================================
// タイムの生成
//==================================================================================================================
CTime *CTime::Create(void)
{
	// シーン動的に確保
	CTime *pTime = new CTime();

	// タイムの初期化
	pTime->Init();

	// 値を返す
	return pTime;
}

//==================================================================================================================
// タイムの変更
//==================================================================================================================
void CTime::SetTime(int nTime)
{
	int nNumber;

	// タイムをフレームで割る
	nTime = (int)(nTime / FRAME_TIMU + 1);

	// 最大桁数までカウント
	for (int nCount = 0; nCount < MAX_TIME; nCount++)
	{
		// 表示する数字計算
		nNumber = nTime % (int)powf(TIME_INTERVAL, (float)MAX_TIME - nCount) / (int)powf(TIME_INTERVAL, MAX_TIME - 1.0f - nCount);

		// 数字設定
		m_apNumber[nCount]->SetNumber(nNumber);
	}

	// タイムを代入
	m_nTime = nTime;
}

//==================================================================================================================
// タイムの再初期化
//==================================================================================================================
void CTime::ResetTime(void)
{
	// 無効
	m_bActive = false;
	// タイム設定
	m_dStartTime = (int)(START_TIMU * FRAME_TIMU);
	// タイムの画像差し替え
	SetTime(m_dStartTime);
}

//==================================================================================================================
// 時間取得
//==================================================================================================================
int CTime::GetTime(void)
{
	return m_nTime;
}

//==================================================================================================================
// 情報取得
//==================================================================================================================
void CTime::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}